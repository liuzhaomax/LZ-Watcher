// #!/bin/env node
/****************************************************************************
 * @copyright Liu Zhao
 * @authors   Liu Zhao (liuzhaomax@163.com)
 * @date      2018-06-20 18:37:58
 * @version   v1.0.0
 * filename   www
 * function   服务入口
 ***************************************************************************/

/**
 * Module dependencies.
 */

const app      = require('../src/app');
const debug    = require('debug')('LZ-WEBSITE:server');
const http     = require('http');
const mongoose = require('mongoose');
const appBase  = require('../config/app.base');

const port = normalizePort(appBase.port);

/**
 * Get port from environment and store in Express.
 */

app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, appBase.ip);
server.on('error', onError);
server.on('listening', onListening);

// 数据库    lztodo 数据库权限
mongoose.Promise = global.Promise;
mongoose.connect(appBase.db.uri);
const db = mongoose.connection;
db.on('error', function (err) {
    console.log('Mongoose connection error: ' + err);
});
db.once('open', function () {
    console.log('Mongoose connection connected!');
});
// mongo 127.0.0.1:27018
// 27017 copy to 27018
// db.copyDatabase("LZ-WATCHER", "LZ-WATCHER", "192.168.1.103:27017")
// 27018 copy to 27017
// db.copyDatabase("LZ-WATCHER", "LZ-WATCHER", "192.168.1.101:27018")
// 复制表
// db.destiny_collection.find().forEach(function(x){db.source_collection.insert(x)})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
